// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hospital_api.Dates;

#nullable disable

namespace hospital_api.Migrations
{
    [DbContext(typeof(AccountsContext))]
    [Migration("20241028151517_newIcd")]
    partial class newIcd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hospital_api.Modules.BlackListTokens", b =>
                {
                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.Property<string>("doctorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("token");

                    b.ToTable("BlackListTokens");
                });

            modelBuilder.Entity("hospital_api.Modules.Comment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("authorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("consultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("modifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("parentId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("consultationId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("hospital_api.Modules.Consultation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("inspectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("specialityId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("specialityId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("hospital_api.Modules.Diagnosis", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("code")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("icdDiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("inspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("hospital_api.Modules.Doctor", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<Guid>("speciality")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("hospital_api.Modules.Icd10Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("actual")
                        .HasColumnType("integer")
                        .HasColumnName("ACTUAL");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MKB_CODE");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("date")
                        .HasColumnType("text")
                        .HasColumnName("DATE");

                    b.Property<int>("id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MKB_NAME");

                    b.Property<string>("parentId")
                        .HasColumnType("text")
                        .HasColumnName("ID_PARENT");

                    b.Property<string>("recCode")
                        .HasColumnType("text")
                        .HasColumnName("REC_CODE");

                    b.HasKey("Id");

                    b.ToTable("Icd");
                });

            modelBuilder.Entity("hospital_api.Modules.Inspection", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("anamnesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("baseInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("deathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("doctor")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("nextVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("patient")
                        .HasColumnType("uuid");

                    b.Property<Guid>("previousInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("doctor");

                    b.HasIndex("patient");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("hospital_api.Modules.PatientModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("hospital_api.Modules.SpecialityModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("hospital_api.Modules.Comment", b =>
                {
                    b.HasOne("hospital_api.Modules.Consultation", "Consultation")
                        .WithMany()
                        .HasForeignKey("consultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("hospital_api.Modules.Consultation", b =>
                {
                    b.HasOne("hospital_api.Modules.SpecialityModel", "SpecialityModel")
                        .WithMany()
                        .HasForeignKey("specialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialityModel");
                });

            modelBuilder.Entity("hospital_api.Modules.Inspection", b =>
                {
                    b.HasOne("hospital_api.Modules.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("doctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Modules.PatientModel", "PatientModel")
                        .WithMany()
                        .HasForeignKey("patient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("PatientModel");
                });
#pragma warning restore 612, 618
        }
    }
}
